# Generated by Django 3.2.15 on 2022-10-21 20:48

import hashlib
from django.db import migrations
import requests


def get_string_sha1(string):
    BUF_SIZE = 10
    sha1 = hashlib.sha1()
    while True:
        data, string = string[:BUF_SIZE], string[BUF_SIZE:]
        if not data:
            break
        sha1.update(data)

    sha_val = sha1.hexdigest()
    return sha_val


def generate_hash(url):
    res = requests.get(url)
    if res.status_code != 200:
        return ""
    return get_string_sha1(res.content)


def create_missing_hashes(apps, schema_editor):
    MyModel = apps.get_model("mlcube", "MlCube")
    for row in MyModel.objects.all():
        update_fields = ["mlcube_hash"]
        hash_ = generate_hash(row.git_mlcube_url)
        row.mlcube_hash = hash_
        if row.git_parameters_url:
            hash_ = generate_hash(row.git_parameters_url)
            row.parameters_hash = hash_
            update_fields.append("parameters_hash")

        row.save(update_fields=update_fields)


class Migration(migrations.Migration):

    dependencies = [
        ("mlcube", "0003_auto_20221021_2038"),
    ]

    operations = [
        migrations.RunPython(
            create_missing_hashes, reverse_code=migrations.RunPython.noop
        ),
    ]
